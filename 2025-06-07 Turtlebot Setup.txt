# üõ†Ô∏è Bit√°cora - June 7, 2025
## üìç Project: TERISA Turtlebot Setup

### üë§ Author: Daniel L√°zaro  
### üïí Session Start: 09:15 AM  
### üåê Location: Home Lab

---

## üîß Objective
Setup TERISA turtlebot in Home Lab 

---

## üìã Materials
- Turtlebot 4 
    - Distributor ID:	Ubuntu
    - Description:	Ubuntu 22.04.5 LTS
    - Release:	22.04
    - Codename:	jammy

- Laptop with Ubuntu 22.04
    -Distributor ID:	Ubuntu
    -Description:	Ubuntu 22.04.5 LTS
    -Release:	22.04
    -Codename:	jammy
- ROS Humble installed in both Turtlebot4 and Laptop. (Turtlebot has everything needed already installed) 
- micro HDMI to HDMI cable
- USB wired keyboard
- HDMI monitor

---

## üß™ Procedure
0. Follow https://turtlebot.github.io/turtlebot4-user-manual/overview/
1. Connect Turtlebot and Monitor via micro HDMI to HDMI cable. ( Ethernet and C-Port acces were tried with no sucess ) 
2. Connect wired keyboard with Turtlebot.
3. Boot Turtlebot.
4. User : Ubuntu
5. Password : turtlebot4
6. Turtlebot setup to set network connection. 
7. * if Turtlebot is being used in a new network it will be better to setup the network in advance thru ssh 

---

## üßæ Observations

- We are using Simple Discover
- Fast DDS is the one compatible with ROS Humble
- If turtlebot is goint to be accessed thru a new computer it will be better to use a new ROS node.
    export RMW_IMPLEMENTATION=rmw_fastrtps_cpp
    export ROS_DOMAIN_ID=0 --> USE A NEW ROS ID. Currently in home lab node 42 is the one used. 

Also it will important to review fastdds.xml file (nano ~/.ros/fastdds.xml) to update IP address of PC and Turtlebot **** THIS IS BEING REMOVED with no harm due to parsin errors. 
Home lab : 
        Turtlebot 192.168.100.214
        PC 192.168.100.250

Test NETWORK communication betwen PC and turtlebot first with 

In Turtlebot: 
Ping 192.168.100.250
In PC:
Ping 192.168.100.214

Test ROS communication betwen PC and turtlebot first with 

In Turtlebot: 
ros2 run demo_nodes_cpp talker
In PC:
ros2 run demo_nodes_cpp listener

## üßæ Manually Deactivate Conda Environment Before ROS 2

If you're already in (base) and just want to leave it for now:

conda deactivate

Then run:

In Robot ssh : 
ros2 launch turtlebot4_bringup standard.launch.py

In a PC ssh : rose 
ros2 run teleop_twist_keyboard teleop_twist_keyboard

Everything starts workikng when : 
1. in CReate app ( by accesing http://192.168.100.214:8080 ) also link ROS2 ID domain
2. Update ROS2 in Robot
3. Connect Robot and PC to the 5G Wifi

## üß† Next Steps
-  Turtlebot manual : Tutorial section : Create 3 actions
- Create a instruction that is call by a single command. 
-


############################################################################
CREATE A EXECUTION FILE FOR A MOVE SEQUENCE IN TH ROBOT 
############################################################################
This works : 


üß± STEP-BY-STEP GUIDE
1. üìÇ Create a Custom ROS 2 Package

Run this on the robot:

cd ~/turtlebot4_ws/src
ros2 pkg create --build-type ament_python turtlebot4_custom --dependencies rclpy geometry_msgs

This creates a Python ROS 2 package.
2. üêç Write the Python Node

Create the file:

mkdir -p ~/turtlebot4_ws/src/turtlebot4_custom/turtlebot4_custom
nano ~/turtlebot4_ws/src/turtlebot4_custom/turtlebot4_custom/action1.py

Paste this content:

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import time

class Action1(Node):
    def __init__(self):
        super().__init__('action1_node')
        self.publisher_ = self.create_publisher(Twist, 'cmd_vel', 10)
        time.sleep(1)

        self.move_forward(1.0, 0.2)   # Move 1m at 0.2 m/s
        self.rotate(30, 0.3)          # Rotate 30 degrees at 0.3 rad/s
        self.move_forward(0.5, 0.2)   # Move 0.5m

    def move_forward(self, distance, speed):
        msg = Twist()
        msg.linear.x = speed
        duration = distance / speed
        end_time = time.time() + duration
        while time.time() < end_time:
            self.publisher_.publish(msg)
            time.sleep(0.1)
        self.stop()

    def rotate(self, angle_degrees, angular_speed):
        msg = Twist()
        msg.angular.z = angular_speed
        angle_radians = angle_degrees * 3.1416 / 180.0
        duration = angle_radians / angular_speed
        end_time = time.time() + duration
        while time.time() < end_time:
            self.publisher_.publish(msg)
            time.sleep(0.1)
        self.stop()

    def stop(self):
        self.publisher_.publish(Twist())
        time.sleep(0.5)

def main(args=None):
    rclpy.init(args=args)
    action = Action1()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

Save and exit with CTRL+O, Enter, then CTRL+X.
3. üß≠ Make the Script Executable

Edit setup.py:

nano ~/turtlebot4_ws/src/turtlebot4_custom/setup.py

Add under entry_points:

entry_points={
    'console_scripts': [
        'action1 = turtlebot4_custom.action1:main',
    ],
},

Then:

chmod +x ~/turtlebot4_ws/src/turtlebot4_custom/turtlebot4_custom/action1.py

4. üõ†Ô∏è Build & Source

cd ~/turtlebot4_ws
colcon build
source install/setup.bash

Make sure this is also added to your .bashrc if needed.
5. üöÄ Run the Script!

ros2 run turtlebot4_custom action1


To repeat this I hade to run points chmod step and steps 4 and 5 



##############################################################################
CREATE A EXECUTION FILE FOR A MOVE SEQUENCE IN THE ROBOT BUT READING 
THE INSTRUCTION FROM THE SERVER API.
############################################################################

This works : 

1. Create the file ServerMonitor : 



import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import time
import requests

API_URL = "https://main.d1eqaycl2z5gxr.amplifyapp.com/api/v1/commands"

# Action routines
def call1(publisher):
    move(publisher, 1.0)
    rotate(publisher, 20)
    move(publisher, 2.0)

def call2(publisher):
    move(publisher, 0.5)
    rotate(publisher, 45)
    move(publisher, 1.0)

def call3(publisher):
    move(publisher, 1.5)
    rotate(publisher, 90)
    move(publisher, 0.7)

# Helpers
def move(publisher, distance_m):
    twist = Twist()
    twist.linear.x = 0.2  # m/s
    duration = distance_m / twist.linear.x
    start = time.time()
    while time.time() - start < duration:
        publisher.publish(twist)
        time.sleep(0.1)
    twist.linear.x = 0.0
    publisher.publish(twist)

def rotate(publisher, angle_deg):
    twist = Twist()
    twist.angular.z = 0.5  # rad/s
    duration = (angle_deg * 3.1416 / 180) / twist.angular.z
    start = time.time()
    while time.time() - start < duration:
        publisher.publish(twist)
        time.sleep(0.1)
    twist.angular.z = 0.0
    publisher.publish(twist)

def fetch_latest_command():
    try:
        response = requests.get(API_URL)
        if response.status_code == 200:
            commands = response.json().get("data", {}).get("commands", [])
            if not commands:
                print("No commands found.")
                return None
            latest = max(commands, key=lambda c: c.get("createdAt", ""))
            return latest["action"]
        else:
            print(f"API error: Status code {response.status_code}")
            return None
    except Exception as e:
        print(f"Exception occurred: {e}")
        return None

def main():
    rclpy.init()
    node = Node("command_runner")
    publisher = node.create_publisher(Twist, "cmd_vel", 10)
    time.sleep(1)  # Allow publisher to settle

    action = fetch_latest_command()
    print(f"Latest action: {action}")
    if action == "call1":
        call1(publisher)
    elif action == "call2":
        call2(publisher)
    elif action == "call3":
        call3(publisher)
    else:
        print("No valid action found in latest command.")

    node.destroy_node()
    rclpy.shutdown()

if __name__ == "__main__":
    main()

 2.    Make it executable (optional):

chmod +x ServerMonitor.py

3.     Run it :

python3 ServerMonitor.py


****** Latency responds is hight , around 20-30 seconds 


****** Latency responds is hight , around 20-30 seconds 

This is working and reduce the Latency but is having a error in the middle ***** TODAY internet is not good!!!! Let's try another day. 

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import requests
import time

API_URL = "https://main.d1eqaycl2z5gxr.amplifyapp.com/api/v1/commands"

class ServerMonitor(Node):
    def __init__(self):
        super().__init__('server_monitor')
        self.publisher_ = self.create_publisher(Twist, 'cmd_vel', 10)
        self.last_command_id = None
        self.timer = self.create_timer(2.0, self.check_for_command)  # every 2 seconds
        self.get_logger().info("üöÄ ServerMonitor node started")

    def check_for_command(self):
        try:
            response = requests.get(API_URL, headers={"Cache-Control": "no-cache"}, timeout=5)
            if response.status_code != 200:
                self.get_logger().warn(f"API error {response.status_code}")
                return

            data = response.json().get("data", {}).get("commands", [])
            if not data:
                self.get_logger().info("No commands received")
                return

            latest_command = max(data, key=lambda c: c.get("createdAt", ""))
            command_id = latest_command.get("id")

            if command_id != self.last_command_id:
                self.last_command_id = command_id
                action = latest_command.get("action")
                self.get_logger().info(f"‚úÖ New command: {action}")
                self.perform_action(action)
            else:
                self.get_logger().debug("No new command")

        except Exception as e:
            self.get_logger().error(f"Error fetching command: {e}")

    def perform_action(self, action):
        if action == "call1":
            self.call1()
        elif action == "call2":
            self.call2()
        elif action == "call3":
            self.call3()
        else:
            self.get_logger().warn(f"‚ö†Ô∏è Unknown action: {action}")

    def move(self, distance_m):
        twist = Twist()
        twist.linear.x = 0.2
        duration = distance_m / twist.linear.x
        end_time = time.time() + duration
        while time.time() < end_time:
            self.publisher_.publish(twist)
            time.sleep(0.1)
        self.stop()

    def rotate(self, angle_deg):
        twist = Twist()
        twist.angular.z = 0.5
        duration = (angle_deg * 3.1416 / 180) / twist.angular.z
        end_time = time.time() + duration
        while time.time() < end_time:
            self.publisher_.publish(twist)
            time.sleep(0.1)
        self.stop()

    def stop(self):
        self.publisher_.publish(Twist())
        time.sleep(0.5)

    def call1(self):
        self.move(1.0)
        self.rotate(20)
        self.move(2.0)

    def call2(self):
        self.move(0.5)
        self.rotate(45)
        self.move(1.0)

    def call3(self):
        self.move(1.5)
        self.rotate(90)
        self.move(0.7)


def main(args=None):
    rclpy.init(args=args)
    node = ServerMonitor()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    node.destroy_node()
    rclpy.shutdown()

if __name__ == "__main__":
    main()



In order to execte it : 
ubuntu@ubuntu:~/turtlebot4_ws$ ros2 run turtlebot4_custom server_monitor_latred


******* NEXT STEP****** 

Continue testing with better Internet. 
If it continue having issues it will be better to go to the previous high latency solution and work from there since this option is missing calls 
Try running without calling : ros2 launch turtlebot4_bringup standard.launch.py. It seems that the command works without it. 










