# üõ†Ô∏è Bit√°cora - June 7, 2025
## üìç Project: TERISA Turtlebot Setup

### üë§ Author: Daniel L√°zaro  
### üïí Session Start: 09:15 AM  
### üåê Location: Home Lab

---

## üîß Objective
Setup TERISA turtlebot in Home Lab 

---

## üìã Materials
- Turtlebot 4 
    - Distributor ID:	Ubuntu
    - Description:	Ubuntu 22.04.5 LTS
    - Release:	22.04
    - Codename:	jammy

- Laptop with Ubuntu 22.04
    -Distributor ID:	Ubuntu
    -Description:	Ubuntu 22.04.5 LTS
    -Release:	22.04
    -Codename:	jammy
- ROS Humble installed in both Turtlebot4 and Laptop. (Turtlebot has everything needed already installed) 
- micro HDMI to HDMI cable
- USB wired keyboard
- HDMI monitor

---

## üß™ Procedure
0. Follow https://turtlebot.github.io/turtlebot4-user-manual/overview/
1. Connect Turtlebot and Monitor via micro HDMI to HDMI cable. ( Ethernet and C-Port acces were tried with no sucess ) 
2. Connect wired keyboard with Turtlebot.
3. Boot Turtlebot.
4. User : Ubuntu
5. Password : turtlebot4
6. Turtlebot setup to set network connection. 
7. * if Turtlebot is being used in a new network it will be better to setup the network in advance thru ssh 

---

## üßæ Observations

- We are using Simple Discover
- Fast DDS is the one compatible with ROS Humble
- If turtlebot is goint to be accessed thru a new computer it will be better to use a new ROS node.
    export RMW_IMPLEMENTATION=rmw_fastrtps_cpp
    export ROS_DOMAIN_ID=0 --> USE A NEW ROS ID. Currently in home lab node 42 is the one used. 

Also it will important to review fastdds.xml file (nano ~/.ros/fastdds.xml) to update IP address of PC and Turtlebot **** THIS IS BEING REMOVED with no harm due to parsin errors. 
Home lab : 
        Turtlebot 192.168.100.214
        PC 192.168.100.250

Test NETWORK communication betwen PC and turtlebot first with 

In Turtlebot: 
Ping 192.168.100.250
In PC:
Ping 192.168.100.214

Test ROS communication betwen PC and turtlebot first with 

In Turtlebot: 
ros2 run demo_nodes_cpp talker
In PC:
ros2 run demo_nodes_cpp listener

## üßæ Manually Deactivate Conda Environment Before ROS 2

If you're already in (base) and just want to leave it for now:

conda deactivate

Then run:

In Robot ssh : 
ros2 launch turtlebot4_bringup standard.launch.py

In a PC ssh : rose 
ros2 run teleop_twist_keyboard teleop_twist_keyboard

Everything starts workikng when : 
1. in CReate app ( by accesing http://192.168.100.214:8080 ) also link ROS2 ID domain
2. Update ROS2 in Robot
3. Connect Robot and PC to the 5G Wifi

## üß† Next Steps
-  Turtlebot manual : Tutorial section : Create 3 actions
- Create a instruction that is call by a single command. 
-

This works : 


üß± STEP-BY-STEP GUIDE
1. üìÇ Create a Custom ROS 2 Package

Run this on the robot:

cd ~/turtlebot4_ws/src
ros2 pkg create --build-type ament_python turtlebot4_custom --dependencies rclpy geometry_msgs

This creates a Python ROS 2 package.
2. üêç Write the Python Node

Create the file:

mkdir -p ~/turtlebot4_ws/src/turtlebot4_custom/turtlebot4_custom
nano ~/turtlebot4_ws/src/turtlebot4_custom/turtlebot4_custom/action1.py

Paste this content:

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import time

class Action1(Node):
    def __init__(self):
        super().__init__('action1_node')
        self.publisher_ = self.create_publisher(Twist, 'cmd_vel', 10)
        time.sleep(1)

        self.move_forward(1.0, 0.2)   # Move 1m at 0.2 m/s
        self.rotate(30, 0.3)          # Rotate 30 degrees at 0.3 rad/s
        self.move_forward(0.5, 0.2)   # Move 0.5m

    def move_forward(self, distance, speed):
        msg = Twist()
        msg.linear.x = speed
        duration = distance / speed
        end_time = time.time() + duration
        while time.time() < end_time:
            self.publisher_.publish(msg)
            time.sleep(0.1)
        self.stop()

    def rotate(self, angle_degrees, angular_speed):
        msg = Twist()
        msg.angular.z = angular_speed
        angle_radians = angle_degrees * 3.1416 / 180.0
        duration = angle_radians / angular_speed
        end_time = time.time() + duration
        while time.time() < end_time:
            self.publisher_.publish(msg)
            time.sleep(0.1)
        self.stop()

    def stop(self):
        self.publisher_.publish(Twist())
        time.sleep(0.5)

def main(args=None):
    rclpy.init(args=args)
    action = Action1()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

Save and exit with CTRL+O, Enter, then CTRL+X.
3. üß≠ Make the Script Executable

Edit setup.py:

nano ~/turtlebot4_ws/src/turtlebot4_custom/setup.py

Add under entry_points:

entry_points={
    'console_scripts': [
        'action1 = turtlebot4_custom.action1:main',
    ],
},

Then:

chmod +x ~/turtlebot4_ws/src/turtlebot4_custom/turtlebot4_custom/action1.py

4. üõ†Ô∏è Build & Source

cd ~/turtlebot4_ws
colcon build
source install/setup.bash

Make sure this is also added to your .bashrc if needed.
5. üöÄ Run the Script!

ros2 run turtlebot4_custom action1









